[{"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\index.js":"1","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\App.js":"2","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\reportWebVitals.js":"3","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\store.js":"4","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\modulesSlice.js":"5","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\AddMods.js":"6","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\allModulesSlice.js":"7","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\timetable.js":"8"},{"size":448,"mtime":1610114596704,"results":"9","hashOfConfig":"10"},{"size":5151,"mtime":1610115713608,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1610082905479,"results":"12","hashOfConfig":"10"},{"size":280,"mtime":1610096716189,"results":"13","hashOfConfig":"10"},{"size":1411,"mtime":1610096716189,"results":"14","hashOfConfig":"10"},{"size":1808,"mtime":1610115712459,"results":"15","hashOfConfig":"10"},{"size":1110,"mtime":1610096716188,"results":"16","hashOfConfig":"10"},{"size":4630,"mtime":1610111376340,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"mbwi2p",{"filePath":"21","messages":"22","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\index.js",[],["39","40"],"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\App.js",["41","42","43","44","45","46","47","48"],"import { Box, Card, Container, FormControl, makeStyles, TextField, Typography } from '@material-ui/core'\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport React, { useState } from 'react'\r\nimport { fetchModule, deleteModule, re } from './redux/modulesSlice'\r\nimport selectAllModules from './redux/modulesSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport AddMods from './AddMods'\r\nimport { border, borderRadius } from '@material-ui/system'\r\nimport logo from './title.png'\r\nimport { generateLessonPlan, dayToIndex } from './timetable'\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    flexWrap: 'wrap',\r\n    margin: '0.75em 0.5em'\r\n  },\r\n  timetable: {\r\n    borderColor: 'grey'\r\n  },\r\n  row: {\r\n    borderRadius: 3,\r\n    borderTop: '1px solid',\r\n    borderColor: 'grey',\r\n    minHeight: '48px',\r\n  },\r\n  dayOfWeek: {\r\n    width: 100,\r\n  },\r\n  slot:\r\n  {\r\n    borderColor: 'grey',\r\n    borderLeft: '1px solid',\r\n  },\r\n  appBar: {\r\n    backgroundColor: '#ececec',\r\n    borderRadius: '8px'\r\n  },\r\n  img: {\r\n    padding: '8px',\r\n    marginTop: '5px',\r\n    width: '30%',\r\n    height: 'auto',\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n  const classes = useStyles();\r\n\r\n  const startTime = '0800';\r\n  const endTime = '1800';\r\n\r\n  const timeSlotCount = ((+endTime) - (+startTime)) / 100;\r\n  const slots = Array.from({ length: timeSlotCount }, (v, i) => {\r\n    return {\r\n      start: ((+startTime) + 100 * i).toString().padStart(4, '0'),\r\n      end: ((+startTime) + 100 * (i + 1)).toString().padStart(4, '0')\r\n    }\r\n  }\r\n  );\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const modules = useSelector((state) => state.modules.modules)\r\n\r\n  const [input, setInput] = useState('')\r\n  const status = useSelector((state) => state.modules.status)\r\n  const onTextChange = e => setInput(e.target.value.toUpperCase())\r\n\r\n  const submitModule = (event) => {\r\n    event.preventDefault();\r\n    dispatch(fetchModule(input))\r\n  }\r\n\r\n  // Get all mods\r\n  const listOfMods = useSelector(state => state.allModules.allModules);\r\n  const lessonPlan = generateLessonPlan(modules, 1);\r\n\r\n  console.log(\"Generated lessons:\");\r\n  console.log(lessonPlan);\r\n\r\n  const timeSlotModules = [];\r\n  \r\n  for (let lesson of lessonPlan) {\r\n    const day = dayToIndex(lesson.day);\r\n    if (timeSlotModules[day] === undefined) {\r\n      timeSlotModules[day] = {};\r\n    }\r\n\r\n    if (timeSlotModules[day][lesson.startTime] === undefined) {\r\n      timeSlotModules[day][lesson.startTime] = [];\r\n    }\r\n    timeSlotModules[day][lesson.startTime].push(lesson); \r\n  }\r\n\r\n\r\n  const lessonSlots = modules.map(module => module.semesterData.map(data => data.timetable));\r\n  console.log(lessonSlots);\r\n\r\n  const slotToString = function(classSlot) {\r\n    return classSlot.moduleCode + 'Class' + classSlot.classNo;\r\n  }\r\n\r\n  if (status === 'succeeded' && typeof test !== 'undefined') {\r\n    console.log(test);\r\n    // modules = test.map(item => {\r\n    //   console.log('test')\r\n    //   // return (\r\n    //   //   <div key={item.moduleCode}>\r\n    //   //     <p>{item.moduleCode}</p>\r\n    //   //     <button value={item.moduleCode} onClick={deleteModule} />\r\n    //   //   </div>\r\n    //   // )\r\n    // })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Typography className={classes.appBar} variant=\"h4\" >\r\n          <img src={logo} className={classes.img} />\r\n        </Typography>\r\n        <Card className={classes.timetable}>\r\n          <Box display=\"flex\" className={classes.row}>\r\n            <Box width={100}>\r\n            </Box>\r\n            {\r\n              slots.map(slot =>\r\n                <Box flex='1' className={classes.slot}>\r\n                  {slot.start}\r\n                </Box>\r\n              )\r\n            }\r\n          </Box>\r\n          {days.map(day =>\r\n            <Box display=\"flex\" className={classes.row}>\r\n              <Box className={classes.dayOfWeek}>\r\n                {day}\r\n              </Box>\r\n              {\r\n                slots.map(slot =>\r\n                  <Box flex='1' className={classes.slot}>\r\n                    {\r\n                      timeSlotModules[day] ? timeSlotModules[day][slot.start]?.map(classSlot => {\r\n                        return <Box display=\"block\">\r\n                          {slotToString(classSlot)}\r\n                        </Box>\r\n                        }\r\n                      ) : null\r\n                    }\r\n                  </Box>\r\n                )\r\n              }\r\n            </Box>\r\n          )}\r\n        </Card>\r\n        <AddMods\r\n          listOfMods={listOfMods}\r\n          onTextChange={onTextChange}\r\n          modules={modules}\r\n        />\r\n        <form onSubmit={submitModule}>\r\n          <TextField onChange={onTextChange} inputProps={{ style: { textTransform: 'uppercase' } }}>\r\n\r\n          </TextField>\r\n        </form>\r\n        {modules.length}\r\n        {\r\n          modules.map(module =>\r\n            <Box>\r\n              {module.moduleCode}\r\n            </Box>\r\n          ) \r\n        }\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\reportWebVitals.js",[],["49","50"],"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\store.js",[],"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\modulesSlice.js",[],"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\AddMods.js",["51"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  width: {\r\n    margin: '1em 0em',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  search: {\r\n    margin: theme.spacing(2, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function AddMods(props) {\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [selectValue, setSelectValue] = useState('');\r\n  const moduleCodes = props.modules.map(module => module.moduleCode);\r\n  \r\n  return (\r\n    <div className={classes.width}>\r\n      {/* <Autocomplete\r\n        value = {inputValue}\r\n        className={classes.search}\r\n        id=\"modsearch\"\r\n        options={props.listOfMods}\r\n        getOptionLabel={(option) => option.moduleCode}\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => <TextField {...params} label=\"Select modules..\" variant=\"outlined\" />}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n      /> */}\r\n\r\n      <Autocomplete\r\n        value={selectValue}\r\n        onChange={(event, newValue) => {\r\n          setSelectValue(newValue);\r\n        }}\r\n        inputValue={inputValue}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        id=\"mod-search\"\r\n        options={props.listOfMods}\r\n        getOptionLabel={(option) => option.moduleCode}\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => <TextField {...params} label=\"Controllable\" variant=\"outlined\" />}\r\n      />\r\n    </div>    \r\n  );\r\n}","C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\redux\\allModulesSlice.js",[],"C:\\Users\\jeffs\\Projects\\Github\\timetabler\\src\\timetable.js",["52"],"\r\n/**Returns an object such that we can get a module by doing\r\n * obj[semester][key], where key is a combination of module and lesson type\r\n * Given a list of modules, returns them grouped by semester then lesson type and module.\r\n * @param {Module[]} modules \r\n */\r\nfunction makeSemesterClasses(modules) {\r\n  const semesterClasses = [];\r\n\r\n  for (let module of modules) {\r\n    for (let semesterObject of module.semesterData) {\r\n      let semester = semesterObject.semester;\r\n      if (semesterClasses[semester] === undefined) {\r\n        semesterClasses[semester] = {};\r\n      }\r\n      for (let lesson of semesterObject.timetable) {\r\n        const lessonType = lesson.lessonType;\r\n        const key = module.moduleCode + lessonType;\r\n        if (semesterClasses[semester][key] === undefined) {\r\n          semesterClasses[semester][key] = [];\r\n        }\r\n\r\n        const extendedLessonObject = JSON.parse(JSON.stringify(lesson))\r\n        extendedLessonObject['moduleCode'] = module.moduleCode;\r\n        semesterClasses[semester][key].push(extendedLessonObject);\r\n      }\r\n    }\r\n  }\r\n  return semesterClasses;\r\n}\r\n\r\nfunction putOneSlotLessons(lessons) {\r\n  let timetable = makeEmptyTimetable();\r\n  lessons = JSON.parse(JSON.stringify(lessons));\r\n  for (let [key, lessonSlots] of Object.entries(lessons)) {\r\n    if (lessonSlots.length === 1) {\r\n      const slot = lessonSlots[0];\r\n      console.log(\"slot\");\r\n      console.log(slot);\r\n      if (hasClash(timetable, slot)) {\r\n        console.log(\"got clash\");\r\n        return [null, null];\r\n      } else {\r\n        timetable = addToTimetable(timetable, slot);\r\n        delete lessons[key];\r\n      }\r\n    }\r\n  }\r\n  return [timetable, lessons];\r\n}\r\n\r\nfunction getTimetableIndices(start, end) {\r\n  const slotCount = ((+end) - (+start)) / 100;\r\n  return Array.from({ length: slotCount }, (v, i) => i);\r\n}\r\n\r\nfunction hasClash(timetable, lesson) {\r\n  const lessonStart = lesson.startTime;\r\n  const lessonEnd = lesson.endTime;\r\n  const day = dayToIndex(lesson.day);\r\n\r\n  return getTimetableIndices(lessonStart, lessonEnd).some((i) => timetable[day][i]);\r\n}\r\n\r\nfunction clone2d(arr) {\r\n  return arr.map(x => x.map(y => y));\r\n}\r\n\r\nfunction dayToIndex(day) {\r\n  switch (day) {\r\n    case 'Monday':\r\n      return 0;\r\n    case 'Tuesday':\r\n      return 1;\r\n    case 'Wednesday':\r\n      return 2;\r\n    case 'Thursday':\r\n      return 3;\r\n    case 'Friday':\r\n      return 4;\r\n    case 'Saturday':\r\n      return 5;\r\n    case 'Sunday':\r\n      return 6;\r\n    default:\r\n      return -1;\r\n  }\r\n}\r\n\r\nfunction makeEmptyTimetable() {\r\n  return Array.from({ length: 7 }, (v, i) => []);\r\n}\r\n\r\nfunction makeTimetable(confirmedLessons) {\r\n  let timetable = makeEmptyTimetable();\r\n  for (let lesson in confirmedLessons) {\r\n    timetable = addToTimetable(timetable, lesson);\r\n  }\r\n  return timetable;\r\n}\r\n\r\nfunction addToTimetable(timetable, lesson) {\r\n  const newTimetable = clone2d(timetable);\r\n  const lessonStart = lesson.startTime;\r\n  const lessonEnd = lesson.endTime;\r\n  const day = dayToIndex(lesson.day);\r\n\r\n  getTimetableIndices(lessonStart, lessonEnd).forEach(\r\n    (index) => { newTimetable[day][index] = true }\r\n  )\r\n\r\n  return newTimetable;\r\n}\r\n\r\nfunction generatePermutation(lessons) {\r\n  // Fix those slots that can be fixed\r\n  const [timetable, unconfirmedLessons] = putOneSlotLessons(lessons);\r\n\r\n  if (timetable === null) {\r\n    return [];\r\n  }\r\n\r\n  function helper(timetable, confirmedLessons, unconfirmedLessons) {\r\n    if (Object.keys(unconfirmedLessons).length === 0) {\r\n      return confirmedLessons;\r\n    }\r\n\r\n    const lessonToChoose = Object.keys(unconfirmedLessons)[0];\r\n\r\n    for (let lessonSlot of unconfirmedLessons[lessonToChoose]) {\r\n      if (hasClash(timetable, lessonSlot)) {\r\n        continue;\r\n      }\r\n      const newTimetable = addToTimetable(timetable, lessonSlot);\r\n      const newConfirmedLessons = [...confirmedLessons];\r\n      const newUnconfirmedLessons = JSON.parse(JSON.stringify(unconfirmedLessons));\r\n\r\n      newConfirmedLessons.push(lessonSlot);\r\n      delete newUnconfirmedLessons[lessonToChoose];\r\n\r\n      const permutation = helper(newTimetable, newConfirmedLessons, newUnconfirmedLessons);\r\n\r\n      if (permutation) {\r\n        return permutation;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n  return helper(timetable, [], unconfirmedLessons);\r\n}\r\n\r\nfunction generateLessonPlan(modules, semester) {\r\n  const semesterClasses = makeSemesterClasses(modules);\r\n  let lessonPlan = [];\r\n\r\n  if (semesterClasses[semester]) {\r\n    lessonPlan = generatePermutation(semesterClasses[semester]);\r\n  }\r\n\r\n  return lessonPlan;\r\n}\r\n\r\nexport { generateLessonPlan, dayToIndex }",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":32,"nodeType":"59","messageId":"60","endLine":1,"endColumn":43},{"ruleId":"57","severity":1,"message":"61","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":20},{"ruleId":"57","severity":1,"message":"62","line":4,"column":23,"nodeType":"59","messageId":"60","endLine":4,"endColumn":35},{"ruleId":"57","severity":1,"message":"63","line":4,"column":37,"nodeType":"59","messageId":"60","endLine":4,"endColumn":39},{"ruleId":"57","severity":1,"message":"64","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":24},{"ruleId":"57","severity":1,"message":"65","line":8,"column":10,"nodeType":"59","messageId":"60","endLine":8,"endColumn":16},{"ruleId":"57","severity":1,"message":"66","line":8,"column":18,"nodeType":"59","messageId":"60","endLine":8,"endColumn":30},{"ruleId":"67","severity":1,"message":"68","line":123,"column":11,"nodeType":"69","endLine":123,"endColumn":53},{"ruleId":"53","replacedBy":"70"},{"ruleId":"55","replacedBy":"71"},{"ruleId":"57","severity":1,"message":"72","line":22,"column":9,"nodeType":"59","messageId":"60","endLine":22,"endColumn":20},{"ruleId":"57","severity":1,"message":"73","line":94,"column":10,"nodeType":"59","messageId":"60","endLine":94,"endColumn":23},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'ScheduleIcon' is defined but never used.","'deleteModule' is defined but never used.","'re' is defined but never used.","'selectAllModules' is defined but never used.","'border' is defined but never used.","'borderRadius' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["74"],["75"],"'moduleCodes' is assigned a value but never used.","'makeTimetable' is defined but never used.","no-global-assign","no-unsafe-negation"]